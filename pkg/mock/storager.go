// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aos-dev/go-storage/v3/types (interfaces: Copier,Mover,Reacher,Servicer,Storager)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	types "github.com/aos-dev/go-storage/v3/types"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockCopier is a mock of Copier interface
type MockCopier struct {
	ctrl     *gomock.Controller
	recorder *MockCopierMockRecorder
}

// MockCopierMockRecorder is the mock recorder for MockCopier
type MockCopierMockRecorder struct {
	mock *MockCopier
}

// NewMockCopier creates a new mock instance
func NewMockCopier(ctrl *gomock.Controller) *MockCopier {
	mock := &MockCopier{ctrl: ctrl}
	mock.recorder = &MockCopierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCopier) EXPECT() *MockCopierMockRecorder {
	return m.recorder
}

// Copy mocks base method
func (m *MockCopier) Copy(arg0, arg1 string, arg2 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Copy", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Copy indicates an expected call of Copy
func (mr *MockCopierMockRecorder) Copy(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockCopier)(nil).Copy), varargs...)
}

// CopyWithContext mocks base method
func (m *MockCopier) CopyWithContext(arg0 context.Context, arg1, arg2 string, arg3 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CopyWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyWithContext indicates an expected call of CopyWithContext
func (mr *MockCopierMockRecorder) CopyWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyWithContext", reflect.TypeOf((*MockCopier)(nil).CopyWithContext), varargs...)
}

// MockMover is a mock of Mover interface
type MockMover struct {
	ctrl     *gomock.Controller
	recorder *MockMoverMockRecorder
}

// MockMoverMockRecorder is the mock recorder for MockMover
type MockMoverMockRecorder struct {
	mock *MockMover
}

// NewMockMover creates a new mock instance
func NewMockMover(ctrl *gomock.Controller) *MockMover {
	mock := &MockMover{ctrl: ctrl}
	mock.recorder = &MockMoverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMover) EXPECT() *MockMoverMockRecorder {
	return m.recorder
}

// Move mocks base method
func (m *MockMover) Move(arg0, arg1 string, arg2 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Move", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Move indicates an expected call of Move
func (mr *MockMoverMockRecorder) Move(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Move", reflect.TypeOf((*MockMover)(nil).Move), varargs...)
}

// MoveWithContext mocks base method
func (m *MockMover) MoveWithContext(arg0 context.Context, arg1, arg2 string, arg3 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MoveWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// MoveWithContext indicates an expected call of MoveWithContext
func (mr *MockMoverMockRecorder) MoveWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveWithContext", reflect.TypeOf((*MockMover)(nil).MoveWithContext), varargs...)
}

// MockReacher is a mock of Reacher interface
type MockReacher struct {
	ctrl     *gomock.Controller
	recorder *MockReacherMockRecorder
}

// MockReacherMockRecorder is the mock recorder for MockReacher
type MockReacherMockRecorder struct {
	mock *MockReacher
}

// NewMockReacher creates a new mock instance
func NewMockReacher(ctrl *gomock.Controller) *MockReacher {
	mock := &MockReacher{ctrl: ctrl}
	mock.recorder = &MockReacherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockReacher) EXPECT() *MockReacherMockRecorder {
	return m.recorder
}

// Reach mocks base method
func (m *MockReacher) Reach(arg0 string, arg1 ...types.Pair) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reach", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reach indicates an expected call of Reach
func (mr *MockReacherMockRecorder) Reach(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reach", reflect.TypeOf((*MockReacher)(nil).Reach), varargs...)
}

// ReachWithContext mocks base method
func (m *MockReacher) ReachWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) (string, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReachWithContext", varargs...)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReachWithContext indicates an expected call of ReachWithContext
func (mr *MockReacherMockRecorder) ReachWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReachWithContext", reflect.TypeOf((*MockReacher)(nil).ReachWithContext), varargs...)
}

// MockServicer is a mock of Servicer interface
type MockServicer struct {
	ctrl     *gomock.Controller
	recorder *MockServicerMockRecorder
}

// MockServicerMockRecorder is the mock recorder for MockServicer
type MockServicerMockRecorder struct {
	mock *MockServicer
}

// NewMockServicer creates a new mock instance
func NewMockServicer(ctrl *gomock.Controller) *MockServicer {
	mock := &MockServicer{ctrl: ctrl}
	mock.recorder = &MockServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServicer) EXPECT() *MockServicerMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockServicer) Create(arg0 string, arg1 ...types.Pair) (types.Storager, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(types.Storager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServicerMockRecorder) Create(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServicer)(nil).Create), varargs...)
}

// CreateWithContext mocks base method
func (m *MockServicer) CreateWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) (types.Storager, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateWithContext", varargs...)
	ret0, _ := ret[0].(types.Storager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithContext indicates an expected call of CreateWithContext
func (mr *MockServicerMockRecorder) CreateWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithContext", reflect.TypeOf((*MockServicer)(nil).CreateWithContext), varargs...)
}

// Delete mocks base method
func (m *MockServicer) Delete(arg0 string, arg1 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServicerMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServicer)(nil).Delete), varargs...)
}

// DeleteWithContext mocks base method
func (m *MockServicer) DeleteWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithContext indicates an expected call of DeleteWithContext
func (mr *MockServicerMockRecorder) DeleteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithContext", reflect.TypeOf((*MockServicer)(nil).DeleteWithContext), varargs...)
}

// Get mocks base method
func (m *MockServicer) Get(arg0 string, arg1 ...types.Pair) (types.Storager, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(types.Storager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockServicerMockRecorder) Get(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServicer)(nil).Get), varargs...)
}

// GetWithContext mocks base method
func (m *MockServicer) GetWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) (types.Storager, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetWithContext", varargs...)
	ret0, _ := ret[0].(types.Storager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithContext indicates an expected call of GetWithContext
func (mr *MockServicerMockRecorder) GetWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithContext", reflect.TypeOf((*MockServicer)(nil).GetWithContext), varargs...)
}

// List mocks base method
func (m *MockServicer) List(arg0 ...types.Pair) (*types.StoragerIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*types.StoragerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockServicerMockRecorder) List(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockServicer)(nil).List), arg0...)
}

// ListWithContext mocks base method
func (m *MockServicer) ListWithContext(arg0 context.Context, arg1 ...types.Pair) (*types.StoragerIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWithContext", varargs...)
	ret0, _ := ret[0].(*types.StoragerIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithContext indicates an expected call of ListWithContext
func (mr *MockServicerMockRecorder) ListWithContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithContext", reflect.TypeOf((*MockServicer)(nil).ListWithContext), varargs...)
}

// String mocks base method
func (m *MockServicer) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockServicerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockServicer)(nil).String))
}

// MockStorager is a mock of Storager interface
type MockStorager struct {
	ctrl     *gomock.Controller
	recorder *MockStoragerMockRecorder
}

// MockStoragerMockRecorder is the mock recorder for MockStorager
type MockStoragerMockRecorder struct {
	mock *MockStorager
}

// NewMockStorager creates a new mock instance
func NewMockStorager(ctrl *gomock.Controller) *MockStorager {
	mock := &MockStorager{ctrl: ctrl}
	mock.recorder = &MockStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorager) EXPECT() *MockStoragerMockRecorder {
	return m.recorder
}

// Delete mocks base method
func (m *MockStorager) Delete(arg0 string, arg1 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockStoragerMockRecorder) Delete(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockStorager)(nil).Delete), varargs...)
}

// DeleteWithContext mocks base method
func (m *MockStorager) DeleteWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteWithContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWithContext indicates an expected call of DeleteWithContext
func (mr *MockStoragerMockRecorder) DeleteWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWithContext", reflect.TypeOf((*MockStorager)(nil).DeleteWithContext), varargs...)
}

// List mocks base method
func (m *MockStorager) List(arg0 string, arg1 ...types.Pair) (*types.ObjectIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*types.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockStoragerMockRecorder) List(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStorager)(nil).List), varargs...)
}

// ListWithContext mocks base method
func (m *MockStorager) ListWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) (*types.ObjectIterator, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListWithContext", varargs...)
	ret0, _ := ret[0].(*types.ObjectIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListWithContext indicates an expected call of ListWithContext
func (mr *MockStoragerMockRecorder) ListWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListWithContext", reflect.TypeOf((*MockStorager)(nil).ListWithContext), varargs...)
}

// Metadata mocks base method
func (m *MockStorager) Metadata(arg0 ...types.Pair) (*types.StorageMeta, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Metadata", varargs...)
	ret0, _ := ret[0].(*types.StorageMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Metadata indicates an expected call of Metadata
func (mr *MockStoragerMockRecorder) Metadata(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metadata", reflect.TypeOf((*MockStorager)(nil).Metadata), arg0...)
}

// MetadataWithContext mocks base method
func (m *MockStorager) MetadataWithContext(arg0 context.Context, arg1 ...types.Pair) (*types.StorageMeta, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "MetadataWithContext", varargs...)
	ret0, _ := ret[0].(*types.StorageMeta)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MetadataWithContext indicates an expected call of MetadataWithContext
func (mr *MockStoragerMockRecorder) MetadataWithContext(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetadataWithContext", reflect.TypeOf((*MockStorager)(nil).MetadataWithContext), varargs...)
}

// Read mocks base method
func (m *MockStorager) Read(arg0 string, arg1 io.Writer, arg2 ...types.Pair) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Read", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *MockStoragerMockRecorder) Read(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStorager)(nil).Read), varargs...)
}

// ReadWithContext mocks base method
func (m *MockStorager) ReadWithContext(arg0 context.Context, arg1 string, arg2 io.Writer, arg3 ...types.Pair) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ReadWithContext", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithContext indicates an expected call of ReadWithContext
func (mr *MockStoragerMockRecorder) ReadWithContext(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithContext", reflect.TypeOf((*MockStorager)(nil).ReadWithContext), varargs...)
}

// Stat mocks base method
func (m *MockStorager) Stat(arg0 string, arg1 ...types.Pair) (*types.Object, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Stat", varargs...)
	ret0, _ := ret[0].(*types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat
func (mr *MockStoragerMockRecorder) Stat(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockStorager)(nil).Stat), varargs...)
}

// StatWithContext mocks base method
func (m *MockStorager) StatWithContext(arg0 context.Context, arg1 string, arg2 ...types.Pair) (*types.Object, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "StatWithContext", varargs...)
	ret0, _ := ret[0].(*types.Object)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StatWithContext indicates an expected call of StatWithContext
func (mr *MockStoragerMockRecorder) StatWithContext(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatWithContext", reflect.TypeOf((*MockStorager)(nil).StatWithContext), varargs...)
}

// String mocks base method
func (m *MockStorager) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String
func (mr *MockStoragerMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockStorager)(nil).String))
}

// Write mocks base method
func (m *MockStorager) Write(arg0 string, arg1 io.Reader, arg2 int64, arg3 ...types.Pair) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Write", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write
func (mr *MockStoragerMockRecorder) Write(arg0, arg1, arg2 interface{}, arg3 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockStorager)(nil).Write), varargs...)
}

// WriteWithContext mocks base method
func (m *MockStorager) WriteWithContext(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 ...types.Pair) (int64, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1, arg2, arg3}
	for _, a := range arg4 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WriteWithContext", varargs...)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WriteWithContext indicates an expected call of WriteWithContext
func (mr *MockStoragerMockRecorder) WriteWithContext(arg0, arg1, arg2, arg3 interface{}, arg4 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1, arg2, arg3}, arg4...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteWithContext", reflect.TypeOf((*MockStorager)(nil).WriteWithContext), varargs...)
}
