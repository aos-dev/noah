// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/aos-dev/noah/pkg/schedule (interfaces: Scheduler)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockScheduler is a mock of Scheduler interface
type MockScheduler struct {
	ctrl     *gomock.Controller
	recorder *MockSchedulerMockRecorder
}

// MockSchedulerMockRecorder is the mock recorder for MockScheduler
type MockSchedulerMockRecorder struct {
	mock *MockScheduler
}

// NewMockScheduler creates a new mock instance
func NewMockScheduler(ctrl *gomock.Controller) *MockScheduler {
	mock := &MockScheduler{ctrl: ctrl}
	mock.recorder = &MockSchedulerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockScheduler) EXPECT() *MockSchedulerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockScheduler) Add(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add
func (mr *MockSchedulerMockRecorder) Add(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockScheduler)(nil).Add), arg0)
}

// AppendFault mocks base method
func (m *MockScheduler) AppendFault(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AppendFault", arg0)
}

// AppendFault indicates an expected call of AppendFault
func (mr *MockSchedulerMockRecorder) AppendFault(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AppendFault", reflect.TypeOf((*MockScheduler)(nil).AppendFault), arg0)
}

// Await mocks base method
func (m *MockScheduler) Await() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Await")
	ret0, _ := ret[0].(error)
	return ret0
}

// Await indicates an expected call of Await
func (mr *MockSchedulerMockRecorder) Await() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Await", reflect.TypeOf((*MockScheduler)(nil).Await))
}

// Done mocks base method
func (m *MockScheduler) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done
func (mr *MockSchedulerMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockScheduler)(nil).Done))
}
